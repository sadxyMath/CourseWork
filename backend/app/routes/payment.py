from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import List
from datetime import date

from backend.app.database import get_db
from backend.app.models import Payment, Contract
from backend.app.schemes import PaymentOut, PaymentCreate, PaymentUpdate
from backend.app.dependencies import require_role

router = APIRouter(
    prefix="/payments",
    tags=["–ü–ª–∞—Ç–µ–∂–∏"]
)

# üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏
@router.get("/", response_model=List[PaymentOut])
def get_payments(
    db: Session = Depends(get_db),
    current_user = Depends(require_role(["admin", "tenant", "staff"]))
):
    if current_user.role in ["admin", "staff"]:
        return db.query(Payment).all()

    # tenant –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –ø–ª–∞—Ç–µ–∂–∏
    return (
        db.query(Payment)
        .join(Contract)
        .filter(Contract.id_–∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞ == current_user.tenant_id)
        .all()
    )


# üîπ –ü–æ–ª—É—á–∏—Ç—å –æ–¥–∏–Ω –ø–ª–∞—Ç–µ–∂
@router.get("/{payment_id}", response_model=PaymentOut)
def get_payment(
    payment_id: int,
    db: Session = Depends(get_db),
    current_user = Depends(require_role(["admin", "tenant", "staff"]))
):
    payment = db.query(Payment).filter(Payment.id_–ø–ª–∞—Ç–µ–∂–∞ == payment_id).first()
    if not payment:
        raise HTTPException(status_code=404, detail="–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞
    if current_user.role == "tenant":
        contract = db.query(Contract).filter(Contract.id_–¥–æ–≥–æ–≤–æ—Ä–∞ == payment.id_–¥–æ–≥–æ–≤–æ—Ä–∞).first()
        if not contract or contract.id_–∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞ != current_user.tenant_id:
            raise HTTPException(status_code=403, detail="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø–ª–∞—Ç–µ–∂—É")

    return payment


# üîπ –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂
@router.post("/", response_model=PaymentOut, status_code=status.HTTP_201_CREATED)
def create_payment(
    payment: PaymentCreate,
    db: Session = Depends(get_db),
    current_user = Depends(require_role(["admin", "tenant"]))
):
    contract = db.query(Contract).filter(Contract.id_–¥–æ–≥–æ–≤–æ—Ä–∞ == payment.id_–¥–æ–≥–æ–≤–æ—Ä–∞).first()
    if not contract:
        raise HTTPException(status_code=404, detail="–î–æ–≥–æ–≤–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if current_user.role == "tenant" and contract.id_–∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞ != current_user.tenant_id:
        raise HTTPException(status_code=403, detail="–ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–ª–∞—Ç–µ–∂ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–∏—Ö –¥–æ–≥–æ–≤–æ—Ä–æ–≤")

    if payment.–¥–∞—Ç–∞_–ø–ª–∞—Ç–µ–∂–∞ < contract.–¥–∞—Ç–∞_–Ω–∞—á–∞–ª–∞:
        raise HTTPException(status_code=400, detail="–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –¥–æ–≥–æ–≤–æ—Ä–∞")

    if contract.—Å—Ç–∞—Ç—É—Å == "—Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç":
        raise HTTPException(status_code=400, detail="–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –ø–ª–∞—Ç–µ–∂ –∫ —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç–æ–º—É –¥–æ–≥–æ–≤–æ—Ä—É")

    db_payment = Payment(**payment.dict())
    db.add(db_payment)
    db.commit()
    db.refresh(db_payment)
    return db_payment


# üîπ –û–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞—Ç–µ–∂ ‚Äî —Ç–æ–ª—å–∫–æ admin
@router.put("/{payment_id}", response_model=PaymentOut)
def update_payment(
    payment_id: int,
    payment: PaymentUpdate,
    db: Session = Depends(get_db),
    current_user = Depends(require_role(["admin"]))
):
    db_payment = db.query(Payment).filter(Payment.id_–ø–ª–∞—Ç–µ–∂–∞ == payment_id).first()
    if not db_payment:
        raise HTTPException(status_code=404, detail="–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    for key, value in payment.dict(exclude_unset=True).items():
        setattr(db_payment, key, value)

    db.commit()
    db.refresh(db_payment)
    return db_payment


# üîπ –£–¥–∞–ª–∏—Ç—å –ø–ª–∞—Ç–µ–∂ ‚Äî —Ç–æ–ª—å–∫–æ admin
@router.delete("/{payment_id}", status_code=status.HTTP_204_NO_CONTENT)
def delete_payment(
    payment_id: int,
    db: Session = Depends(get_db),
    current_user = Depends(require_role(["admin"]))
):
    db_payment = db.query(Payment).filter(Payment.id_–ø–ª–∞—Ç–µ–∂–∞ == payment_id).first()
    if not db_payment:
        raise HTTPException(status_code=404, detail="–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    db.delete(db_payment)
    db.commit()
    return None


# üîπ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ ‚Äî admin –∏ staff
@router.post("/check-overdue", response_model=dict)
def check_overdue_payments(
    db: Session = Depends(get_db),
    current_user = Depends(require_role(["admin", "staff"]))
):
    today = date.today()
    overdue = (
        db.query(Payment)
        .filter(Payment.–¥–∞—Ç–∞_–ø–ª–∞—Ç–µ–∂–∞ < today, Payment.—Å—Ç–∞—Ç—É—Å == "–Ω–µ –æ–ø–ª–∞—á–µ–Ω")
        .all()
    )

    for pay in overdue:
        pay.—Å—Ç–∞—Ç—É—Å = "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω"

    db.commit()
    return {"detail": f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {len(overdue)} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π"}
